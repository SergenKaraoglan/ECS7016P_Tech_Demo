About: The project runs a Wave Function Collapse (WFC) algorithm to generate 2D levels on a 2D tilemap using tiles created using the third party asset TilesNew-export.png.

Third party assets:
The third party asset used is a CC0 licensed tileset called TilesNew-export.png which has been downloaded using the following link:
https://opengameart.org/content/dark-grass16x16-tileset

This asset is split into 16x16 sprites which are converted to Tiles that are rendered on the tilemap Main_tilemap of the TechDemo scene. All assets created using the TilesNew-export.png can be found under the Assets/ThirdParty directory which are the sprites, tiles and Tile Palette. Tile Palette was used to place tiles onto Main_tilemap within the unity editor which is used as input for the WFC algorithm.

Video documentation: https://youtu.be/y9kr-q1PJro

Usage: Play the scene TechDemo and click the button 'Generate' to generate new levels. The width and height of the levels that can be generated can be modified using sliders with headers 'Height' and 'Width' under Main_tilemap within the Unity editor. Main_tilemap contains a predefined level that will be initially seen on the unity editor which is used as input to generate new levels using WFC. This input can be modified by swapping the current tiles for any other tiles of choice. This allows for different levels with different WFC constraints to be generated.

Documentation:
WFC is a procedural content generation algorithm that can generate tiles in a grid to create a level. The key idea behind this algorithm is that the tiles that are chosen to be rendered have to follow adjacency constraints. These constraints can be either predefined or generated using an input.

The script that runs WFC is WFC_Generator.cs which is included in the directory MyScripts and is a component of Main_tilemap. Main_tilemap and Generator_Button are two objects within the scene that are used as variables within the script. Main_tilemap is the input and output tilemap of the scene which is 2D and can contains rectangular tiles. Generator_Button is a button which generates a new level on click.

The script generates a level, firstly by defining all variables that are required to run WFC. These are: 
1. The global count of each unique tile from the input which are later used to calculate probability of picking that tile.
2. The constraints of which tiles can be adjacent for each cardinal direction of a tile. 
3. The initial output tilemap which includes all possible tiles that can be rendered for each tilemap coordinate (which is initially all tiles for all coordinates)
4. The entropy of each tilemap coordinate which is dependent on which tiles can be rendered on that coordinate. The entropy will be used to choose the next tilemap coordinate to fill with a tile.

The coordinate is the x, y position of the 2D tilemap. 
In summary, what is defined are the constraints, the initial output tilemap and entropy for each coordinate of the output tilemap.

With all variables set to be able to perform WFC, the level can be generated by first picking a tile coordinate with the minimum entropy (ties are broken randomly), then randomly picking a tile that satisfies the constraints defined and rendering the tile on that tilemap coordinate. Once this is achieved, the new constraints are propagated across the tilemap. There is potential for new constraints because once a tile has been picked, tiles that previously satisfied the constraints now may not as they only satisfied one of the other potential tiles that could have been rendered which is now not possible. Once the above is achieved all the above steps are repeated until there are no tiles left to render which will be either because the tilemap has been complete or no tiles are left to render that meet the WFC constraints. All variables can be reinitialised and the loop can create a new level once again from scratch with the generate button. How all the above is achieved using C# is written below and the code has been commented.


Firstly, once all field variables have been initialised, the constraints for WFC are generated under the function GenerateConstraints. This function iterates over all coordinates of Main_tilemap that includes a tile as seen on the Unity editor. By iterating over each tile, the global count of each unique tile is stored in a dictionary named tileCount. Through the iteration process the adjacent tiles of each tile is checked to define the constraints of which tiles can be adjacent to each other at each cardinal direction. This information is stored within a dictionary named tileConstraints using tiles as keys and respective values of a length of 4 array with each index containing a HashSet that store the adjacent tiles. Each index within the 4 length array represents the positions right, down, left, up in that order with each HashSet at each index containing tiles that can be adjacent in that direction as seen on the input.

Next, now knowing each possible unique tile, the data structure that represents the output tilemap is generated. The data structure is a 2D array named outputTilemap with each index containing a HashSet that contains all tiles that can be rendered for that x, y coordinate of the output tilemap. To begin with we want all positions of our output tilemap to potentially generate any tile so all Hashsets will contain all tiles. This is achieved by calling the function InitialiseOutputTilemap.


To render a tile, first a coordinate within the tilemap has to be chosen as this will be where a tile will be rendered. The function to perform this is PickTileCoor which picks the tilemap coordinate with the lowest entropy. To achieve this, first the function IntialiseEntropy is called. This function initialises the entropy for each coordinate of outputTilemap by calculating the entropy using the function CalculateEntropy which uses the Shannon entropy formula. The formula uses the probability of each tile which is acquired using the global tile count. By picking according to minimum entropy rather than stochastically or in a predefined order we are less likely to result with a tilemap that is incomplete with no tiles left that meet the constraints.

With the rules, entropy and initial output tilemap generated, the loop for WFC which picks and renders tiles is called. This function is called WFCloop. As mentioned earlier, first a tilemap coordinate is picked according to the lowest entropy using the function PickTileCoor. Once the tilemap coordinate has been chosen, now a tile is picked that meets the constraints. The function that achieves this is named PickTile. PickTile iterates through all tiles that meet the constraints which are all tiles within the set of outputTilemap at that coordinate. The probability of each tile is calculated using each tiles global tile count and dividing by the sum of all tile counts of the set. Using the probabilities a tile is picked at random by generating a Double value that is between 0 and 1 and comparing it with the cumulative probability of each tile.

Finally once a tile is picked and rendered with function RenderTile at its respective point of the output tilemap, the tiles that can be rendered and meet the constraints needs to be updated. This is achieved with the function Propagate.

During propagation all tile coordinates adjacent to the tile rendered are pushed into a Stack data structure as the tiles that could have been rendered in these locations may now not the meet the constraints. This repeats, meaning if any of the adjacent tile constraints are updated than their adjacent tiles also need to be pushed to the stack. This is achieved with a while loop that pops a tile from the stack per loop until empty. 

To check if a tile still satisfies the constraints, it is compared with every tile within the previous tile location and checked if it is contained in the set within the tileConstraints variable for its respective adjacent direction. If it is not contained then it needs to be removed as that tile does not satisfy the constraints and therefore cannot be rendered. For every update the entropy is also updated as this would also change. 

Once again WFCloop repeats the steps: pick tilemap coordinate, pick tile, render and propagate until either the output tilemap is complete or no more tiles meet the constraints and therefore no more tiles can be rendered.

